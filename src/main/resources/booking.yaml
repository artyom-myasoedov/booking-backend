swagger: "2.0"
info:
  description: "Booking"
  version: "1.0.0"
  title: "Booking service"
host: "booking.swagger.io"
basePath: "/v2"
tags:
  - name: "booking"
    description: "Booking service"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"
schemes:
  - "https"
  - "http"
paths:
  /admin:
    post:
      tags:
        - "admin"
      summary: "Create admin"
      description: "This can only be done by the logged in admin."
      operationId: "createAdmin"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created admin object"
          required: true
          schema:
            $ref: "#/definitions/AdminForBack"
      responses:
        "200":
          description: "successful operation"
    put:
      tags:
        - "admin"
      summary: "Updated admin"
      description: "This can only be done by the logged in admin."
      operationId: "updateAdmin"
      produces:
        - "application/json"
      parameters:
        - name: "adminId"
          in: "path"
          description: "id that need to be updated"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Updated admin object"
          required: true
          schema:
            $ref: "#/definitions/AdminForBack"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AdminForFront"
        "400":
          description: "Invalid admin supplied"
        "404":
          description: "Admin not found"
  /admin/login:
    get:
      tags:
        - "admin"
      summary: "Logs admin into the system"
      description: ""
      operationId: "loginAdmin"
      produces:
        - "application/json"
      parameters:
        - name: "login"
          in: "query"
          description: "The user name for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AdminForFront"
        "400":
          description: "Invalid username/password supplied"
  /admin/logout:
    get:
      tags:
        - "admin"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutAdmin"
      produces:
        - "application/json"
      parameters: [ ]
      responses:
        default:
          description: "successful operation"
  /admin/{adminId}:
    get:
      tags:
        - "admin"
      summary: "Get admin by id"
      description: ""
      operationId: "getAdminById"
      produces:
        - "application/json"
      parameters:
        - name: "adminId"
          in: "path"
          description: ""
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/AdminForFront"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "Admin not found"
    delete:
      tags:
        - "admin"
      summary: "Delete admin"
      description: "This can only be done by the logged in admin."
      operationId: "deleteAdmin"
      produces:
        - "application/json"
      parameters:
        - name: "adminId"
          in: "path"
          description: "The id that needs to be deleted"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid adminId supplied"
        "404":
          description: "Admin not found"
  /user:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createuser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/UserForBack"
      responses:
        "200":
          description: "successful operation"
    put:
      tags:
        - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateuser"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "id that need to be updated"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/UserForBack"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserForFront"
        "400":
          description: "Invalid user supplied"
        "404":
          description: "user not found"
  /user/login:
    get:
      tags:
        - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginuser"
      produces:
        - "application/json"
      parameters:
        - name: "login"
          in: "query"
          description: "The user name for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserForFront"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
        - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutuser"
      produces:
        - "application/json"
      parameters: [ ]
      responses:
        default:
          description: "successful operation"
  /user/{userId}:
    get:
      tags:
        - "user"
      summary: "Get user by id"
      description: ""
      operationId: "getuserById"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: ""
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserForFront"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "user not found"
    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteuser"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "The id that needs to be deleted"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid userId supplied"
        "404":
          description: "user not found"
  /equipment/{equipmentId}:
    get:
      tags:
        - "equipment"
      summary: "Find equipment by ID"
      description: "Returns a single equipment"
      operationId: "getEquipment"
      produces:
        - "application/json"
      parameters:
        - name: "equipmentId"
          in: "path"
          description: "ID of equipment to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Equipment"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Equipment not found"
    delete:
      tags:
        - "equipment"
      summary: "Deletes a equipment"
      description: "Deletes a equipment from storage by id"
      operationId: "deleteEquipment"
      produces:
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "equipmentId"
          in: "path"
          description: "Equipment id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Equipment not found"
  /equipment:
    put:
      tags:
        - "equipment"
      summary: "Update a equipment in the storage with body"
      description: "Returns updated equipment"
      operationId: "updateEquipmentWithBody"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "equipment"
          in: "body"
          description: "body of a new equipment to update"
          required: true
          schema:
            $ref: "#/definitions/Equipment"
      responses:
        "200":
          description: "Successfully updated"
          schema:
            $ref: "#/definitions/Equipment"
        "405":
          description: "Invalid input"
    post:
      tags:
        - "equipment"
      summary: "Add a equipment in the storage with body"
      description: "Returns added equipment"
      operationId: "addEquipmentWithBody"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "equipment"
          in: "body"
          description: "body of a new equipment to add"
          required: true
          schema:
            $ref: "#/definitions/Equipment"
      responses:
        "200":
          description: "Successfully added"
          schema:
            $ref: "#/definitions/Equipment"
        "405":
          description: "Invalid input"
  /equipment/byRoomId:
    get:
      tags:
        - "equipment"
      summary: "Returns a list of equipments by room id"
      description: "Returns list of equipments"
      operationId: "getEquipmentByRoomId"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "roomId"
          in: "query"
          description: "room id"
          required: true
          type: "integer"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Equipment"
        "405":
          description: "Invalid input"
  /equipment/getAllEquipments:
    get:
      tags:
        - "equipment"
      summary: "Returns a list of equipments"
      description: "Returns list of equipments"
      operationId: "getallEquipments"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters: []
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Equipment"
        "405":
          description: "Invalid input"
  /typeOfRent:
    get:
      tags:
        - "typeOfRent"
      summary: "Find typeOfRent by ID and roomId"
      description: "Returns a single typeOfRent"
      operationId: "getTypeOfRent"
      produces:
        - "application/json"
      parameters:
        - name: "typeOfRentId"
          in: "query"
          description: "ID of typeOfRent to return"
          required: true
          type: "integer"
          format: "int64"
        - name: "roomId"
          in: "query"
          description: "ID of room to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TypeOfRent"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "TypeOfRent not found"
    delete:
      tags:
        - "typeOfRent"
      summary: "Deletes a typeOfRent"
      description: "Deletes a typeOfRent from storage by id"
      operationId: "deleteTypeOfRent"
      produces:
        - "application/json"
      parameters:
        - name: "typeOfRentId"
          in: "path"
          description: "TypeOfRent id to delete"
          required: true
          type: "integer"
          format: "int64"
        - name: "roomId"
          in: "path"
          description: "Room id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Equipment not found"
    put:
      tags:
        - "typeOfRent"
      summary: "Update a typeOfRent in the storage with body"
      description: "Returns updated typeOfRent"
      operationId: "updateTypeOfRentWithBody"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "typeOfRent"
          in: "body"
          description: "body of a new typeOfRent to update"
          required: true
          schema:
            $ref: "#/definitions/TypeOfRent"
      responses:
        "200":
          description: "Successfully updated"
          schema:
            $ref: "#/definitions/TypeOfRent"
        "405":
          description: "Invalid input"
    post:
      tags:
        - "typeOfRent"
      summary: "Add a typeOfRent in the storage with body"
      description: "Returns added typeOfRent"
      operationId: "addTypeOfRentWithBody"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "typeOfRent"
          in: "body"
          description: "body of a new typeOfRent to add"
          required: true
          schema:
            $ref: "#/definitions/TypeOfRent"
      responses:
        "200":
          description: "Successfully added"
          schema:
            $ref: "#/definitions/TypeOfRent"
        "405":
          description: "Invalid input"
  /typeOfRent/byRoomId:
      get:
        tags:
          - "typeOfRent"
        summary: "Returns a list of typeOfRent by room id"
        description: "Returns list of typeOfRent"
        operationId: "getTypeOfRentByRoomId"
        consumes:
          - "application/x-www-form-urlencoded"
        produces:
          - "application/json"
        parameters:
          - name: "roomId"
            in: "query"
            description: "room id"
            required: true
            type: "integer"
        responses:
          "200":
            description: "Successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/TypeOfRent"
          "405":
            description: "Invalid input"
  /review/{reviewId}:
    get:
      tags:
        - "review"
      summary: "Find review by ID"
      description: "Returns a single review"
      operationId: "getReview"
      produces:
        - "application/json"
      parameters:
        - name: "reviewId"
          in: "path"
          description: "ID of review to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ReviewForFront"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Review not found"
    delete:
      tags:
        - "review"
      summary: "Deletes a review"
      description: "Deletes a review from storage by id"
      operationId: "deleteReview"
      produces:
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "reviewId"
          in: "path"
          description: "Review id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successfully deleted"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Review not found"
  /review:
    put:
      tags:
        - "review"
      summary: "Update a review in the storage with body"
      description: "Returns updated review"
      operationId: "updateReviewWithBody"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "review"
          in: "body"
          description: "body of a new review to update"
          required: true
          schema:
            $ref: "#/definitions/ReviewForBack"
      responses:
        "200":
          description: "Successfully updated"
          schema:
            $ref: "#/definitions/ReviewForFront"
        "405":
          description: "Invalid input"
    post:
      tags:
        - "review"
      summary: "Add a review in the storage with body"
      description: "Returns added review"
      operationId: "addReviewWithBody"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "review"
          in: "body"
          description: "body of a new review to add"
          required: true
          schema:
            $ref: "#/definitions/ReviewForBack"
      responses:
        "200":
          description: "Successfully added"
          schema:
            $ref: "#/definitions/ReviewForFront"
        "405":
          description: "Invalid input"
  /review/byClientId:
    get:
      tags:
        - "review"
      summary: "Returns a reviews by client id"
      description: "Returns list of reviews"
      operationId: "getReviewsByClientId"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "clientId"
          in: "query"
          description: "client id"
          required: true
          type: "integer"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ReviewForFront"
        "405":
          description: "Invalid input"
  /review/byLandlordId:
    get:
      tags:
        - "review"
      summary: "Returns a reviews by landlord id"
      description: "Returns list of reviews"
      operationId: "getReviewsByLandlordId"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "landlordId"
          in: "query"
          description: "landlord id"
          required: true
          type: "integer"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ReviewForFront"
        "405":
          description: "Invalid input"
  /review/byRoomId:
    get:
      tags:
        - "review"
      summary: "Returns a reviews by room id"
      description: "Returns list of reviews"
      operationId: "getReviewsByRoomId"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "roomId"
          in: "query"
          description: "room id"
          required: true
          type: "integer"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ReviewForFront"
        "405":
          description: "Invalid input"
  /booking/{bookingId}:
    get:
      tags:
        - "booking"
      summary: "Find booking by ID"
      description: "Returns a single booking"
      operationId: "getBooking"
      produces:
        - "application/json"
      parameters:
        - name: "bookingId"
          in: "path"
          description: "ID of booking to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Booking"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Booking not found"
    delete:
      tags:
        - "booking"
      summary: "Deletes a booking"
      description: "Deletes a booking from storage by id"
      operationId: "deleteBooking"
      produces:
        - "application/json"
      parameters:
        - name: "bookingId"
          in: "path"
          description: "ID of booking to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successfully deleted"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Booking not found"
  /booking:
    post:
      tags:
        - "booking"
      summary: "Add a booking in the storage with body"
      description: "Returns added booking"
      operationId: "addBookingWithBody"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "booking"
          in: "body"
          description: "body of a new booking to add"
          required: true
          schema:
            $ref: "#/definitions/Booking"
      responses:
        "200":
          description: "Successfully added"
          schema:
            $ref: "#/definitions/Booking"
        "405":
          description: "Invalid input"
    put:
      tags:
        - "booking"
      summary: "Updates a booking in the storage with body"
      description: "Returns updated booking"
      operationId: "updateBookingWithBody"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "room"
          in: "body"
          description: "body of a new booking to update"
          required: true
          schema:
            $ref: "#/definitions/Booking"
      responses:
        "200":
          description: "Successfully updated"
          schema:
            $ref: "#/definitions/Booking"
        "405":
          description: "Invalid input"
  /booking/byClientId:
    get:
      tags:
        - "booking"
      summary: "Returns a bookings by client id"
      description: "Returns list of bookings"
      operationId: "getBookingByClientId"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "clientId"
          in: "query"
          description: "client id"
          required: true
          type: "integer"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Booking"
        "405":
          description: "Invalid input"
  /booking/byRoomId:
    get:
      tags:
        - "booking"
      summary: "Returns a bookings by room id"
      description: "Returns list of bookings"
      operationId: "getBookingByRoomId"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "roomId"
          in: "query"
          description: "room id"
          required: true
          type: "integer"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Booking"
        "405":
          description: "Invalid input"
  /booking/getAllBookings:
    get:
      tags:
        - "booking"
      summary: "Returns a list of bookings"
      description: "Returns list of bookings"
      operationId: "getAllBookings"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters: [ ]
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Booking"
        "405":
          description: "Invalid input"
  /room/{roomId}:
    get:
      tags:
        - "room"
      summary: "Find room by ID"
      description: "Returns a single room"
      operationId: "getroom"
      produces:
        - "application/json"
      parameters:
        - name: "roomId"
          in: "path"
          description: "ID of room to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Room"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Room not found"
    delete:
      tags:
        - "room"
      summary: "Deletes a room"
      description: "Deletes a room from storage by id"
      operationId: "deleteRoom"
      produces:
        - "application/json"
      parameters:
        - name: "roomId"
          in: "path"
          description: "ID of room to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successfully deleted"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Room not found"
  /room:
    post:
      tags:
        - "room"
      summary: "Add a room in the storage with body"
      description: "Returns added room"
      operationId: "addRoomWithBody"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "room"
          in: "body"
          description: "body of a new room to add"
          required: true
          schema:
            $ref: "#/definitions/Room"
      responses:
        "200":
          description: "Successfully added"
          schema:
            $ref: "#/definitions/Room"
        "405":
          description: "Invalid input"
    put:
      tags:
        - "room"
      summary: "Updates a room in the storage with body"
      description: "Returns updated room"
      operationId: "updateroomWithBody"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "room"
          in: "body"
          description: "body of a new room to update"
          required: true
          schema:
            $ref: "#/definitions/Room"
      responses:
        "200":
          description: "Successfully updated"
          schema:
            $ref: "#/definitions/Room"
        "405":
          description: "Invalid input"
  /room/byLandlordId:
    get:
      tags:
        - "room"
      summary: "Returns a rooms by landlord id"
      description: "Returns list of rooms"
      operationId: "getRoomByLandlordId"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "landlordId"
          in: "query"
          description: "landlord id"
          required: true
          type: "integer"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Room"
        "405":
          description: "Invalid input"
  /room/getAllrooms:
    get:
      tags:
        - "room"
      summary: "Returns a list of rooms"
      description: "Returns list of rooms"
      operationId: "getAllRooms"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters: [ ]
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Room"
        "405":
          description: "Invalid input"
definitions:
  AdminForBack:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      login:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      password:
        type: "string"
      photo:
        type: "string"
        format: "byte"
    xml:
      name: "AdminForBack"
  AdminForFront:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      photo:
        type: "string"
        format: "byte"
    xml:
      name: "AdminForFront"
  UserForBack:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      login:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      rating:
        type: "number"
      phone:
        type: "string"
      photo:
        type: "string"
        format: "byte"
    xml:
      name: "UserForBack"
  UserForFront:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      rating:
        type: "number"
      phone:
        type: "string"
      photo:
        type: "string"
        format: "byte"
    xml:
      name: "UserForFront"
  TypeOfRent:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      roomId:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      numberOfHours:
        type: "integer"
        format: "int64"
      price:
        type: "number"
    xml:
      name: "TypeOfRent"
  Room:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      size:
        type: "integer"
        format: "int64"
      landlord:
        $ref: "#/definitions/UserForFront"
      typeOfRoom:
        type: "string"
      numberOfPeople:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        enum:
          - "availavle"
          - "not confirmed"
          - "booked"
      adress:
        type: "string"
      description:
        type: "string"
      rating:
        type: "number"
      minRentPeriod:
        type: "integer"
      photos:
        type: "array"
        xml:
          name: "photo"
          wrapped: true
        items:
          type: "string"
          format: "byte"
      typesOfRent:
        type: "array"
        xml:
          name: "typesOfRent"
          wrapped: true
        items:
          $ref: "#/definitions/TypeOfRent"
      equipments:
        type: "array"
        xml:
          name: "equipments"
          wrapped: true
        items:
          $ref: "#/definitions/Equipment"
      reviews:
        type: "array"
        xml:
          name: "reviews"
          wrapped: true
        items:
          $ref: "#/definitions/ReviewForFront"
    xml:
      name: "Room"
  RoomWithoutReviews:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      size:
        type: "integer"
        format: "int64"
      landlord:
        $ref: "#/definitions/UserForFront"
      typeOfRoom:
        type: "string"
      numberOfPeople:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        enum:
          - "available"
          - "not confirmed"
          - "booked"
      adress:
        type: "string"
      description:
        type: "string"
      minRentPeriod:
        type: "integer"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      typesOfRent:
        type: "array"
        xml:
          name: "typesOfRent"
          wrapped: true
        items:
          $ref: "#/definitions/TypeOfRent"
      equipments:
        type: "array"
        xml:
          name: "equipments"
          wrapped: true
        items:
          $ref: "#/definitions/Equipment"
    xml:
      name: "RoomWithoutReviews"
  Equipment:
    type: "object"
    properties:
      name:
        type: "string"
      description:
        type: "string"
    xml:
      name: "Equipment"
  ReviewForBack:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      authorId:
        type: "integer"
        format: "int64"
      targetType:
        type: "string"
        enum:
          - "ROOM"
          - "USER"
      targetId:
        type: "integer"
        format: "int64"
      rate:
        type: "integer"
        format: "int64"
      description:
        type: "string"
    xml:
      name: "ReviewForBack"
  ReviewForFront:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      author:
        $ref: "#/definitions/UserForFront"
      rate:
        type: "integer"
        format: "int64"
      description:
        type: "string"
    xml:
      name: "ReviewForFront"
  Booking:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      room:
        $ref: "#/definitions/Room"
      tenant:
        $ref: "#/definitions/UserForFront"
      startOfBooking:
        type: "string"
        format: "date-time"
      periodOfBooking:
        type: "integer"
        format: "int64"
    xml:
      name: "Booking"
